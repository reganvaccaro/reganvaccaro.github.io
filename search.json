[
  {
    "objectID": "posts/march-madness-prediction/index.html",
    "href": "posts/march-madness-prediction/index.html",
    "title": "March Madness has its name for a reason.",
    "section": "",
    "text": "This year in my advanced sports data and analytics class, I worked to create a model to predict the outcome of the NCAA Men’s basketball tournament also known as March Madness.\nHow did it go you may ask?\nWell. It was madness.\nOut of 17 brackets in the class, I ended up dead last in the class. With 67 games being played in total, I predicted the correct outcome of only 14 games. That leaves me with a success rate of only about 20%.\nOn the bright side of things, I did predict a few things correctly. Within those few predictions were the Gonzaga and Xavier runs as well as the big win for Furman over Virginia.\nSo what metrics did I choose to predict our March Madness tournament?\nPoints per possession, Effective field goal percentage, Offensive rebound percentage, Defensive rebound percentage, and Turnover percentage.\nBased on my little knowledge of basketball, I thought that these metrics would help effectively predict a basketball game. The reasoning? Usually if a team has more points than the other team, if the team is more effective than its opponent, rebounds better, and turns the ball over less, the team will outperform and win the game.\nBelow here is the code that I used to predict the outcome of the NCAA tournament. Within this I used a lightgbm model to predict the outcomes of all of the games in each region. I used lightgbm since it was the quickest and most efficient to run given the state of my computer and the time that I needed to run my program.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(hoopR)\nlibrary(gt)\nlibrary(wehoop)\n\n\n\nteamgames &lt;- load_mbb_team_box(2015:2023)\n\nteamstats &lt;- teamgames %&gt;% \n  filter(game_date &lt;as.Date(\"2023-03-14\")) %&gt;%\n  mutate(\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    ppp = team_score * 100 /possessions,\n    efg = (field_goals_made  + 0.5 * three_point_field_goals_made) /field_goals_attempted,\n    orb = (offensive_rebounds / total_rebounds),\n    drb = (defensive_rebounds / total_rebounds),\n    tovp = (turnovers *100 ) / (field_goals_attempted + 0.44 * free_throws_attempted + turnovers),\n  )\n\n\nrollingteamstats &lt;- teamstats %&gt;% \n  group_by(team_short_display_name, season) %&gt;%\n  arrange(game_date) %&gt;%\n  mutate((team_score = (field_goals_made-three_point_field_goals_made) * 2) + (three_point_field_goals_made*3) + free_throws_made,\n    team_rolling_ppp = rollmean(lag(ppp, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_efg = rollmean(lag(efg, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_orb = rollmean(lag(orb, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_drb = rollmean(lag(drb, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_tovp = rollmean(lag(tovp, n=1), k=5, align = \"right\", fill=NA)) %&gt;% \n  ungroup()\n\n\nteam_side &lt;- rollingteamstats %&gt;%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_rolling_efg,\n    team_rolling_orb,\n    team_rolling_drb,\n    team_rolling_tovp\n    ) \n\nopponent_side &lt;- team_side %&gt;%\n  select(-opponent_team_id) %&gt;% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_efg = team_rolling_efg,\n    opponent_rolling_orb = team_rolling_orb,\n    opponent_rolling_drb = team_rolling_drb,\n    opponent_rolling_tovp = team_rolling_tovp\n  ) %&gt;%\n  mutate(opponent_team_id = as.numeric(opponent_team_id)\n)\n\ngames &lt;- team_side %&gt;% inner_join(opponent_side)\n\ngames &lt;- games %&gt;%\n  filter(game_date &lt; \"2023-03-16\")\n\ngames &lt;- games %&gt;% mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n))) %&gt;% na.omit()\n\nmodelgames &lt;- games %&gt;% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp,\n    team_rolling_efg, \n    opponent_rolling_efg,\n    opponent_rolling_orb,\n    team_rolling_orb,\n    opponent_rolling_drb,\n    team_rolling_drb,\n    team_rolling_tovp,\n    opponent_rolling_tovp,\n    team_result\n    ) %&gt;% \n  na.omit()\n\n\n\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\nlightgbm_mod &lt;-\n  boost_tree() %&gt;%\n  set_engine(\"lightgbm\") %&gt;%\n  set_mode(mode = \"classification\")\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_train) %&gt;% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\") %&gt;%\n  step_normalize(all_predictors())\n\n\nlightgbm_workflow &lt;- \n  workflow() %&gt;% \n  add_model(lightgbm_mod) %&gt;% \n  add_recipe(game_recipe)\n\nlightgbm_fit &lt;- \n  lightgbm_workflow %&gt;% \n  fit(data = game_train)\n\n\nrollingteamstats &lt;- teamstats %&gt;% \n  group_by(team_short_display_name, season) %&gt;%\n  arrange(game_date) %&gt;%\n  mutate(\n    team_score = ((field_goals_made-three_point_field_goals_made) * 2) + (three_point_field_goals_made*3) + free_throws_made,\n    team_rolling_ppp = rollmean(ppp, k=5, align=\"right\", fill=NA),\n    team_rolling_efg = rollmean(efg, k=5, align=\"right\", fill=NA),\n    team_rolling_orb = rollmean(orb, n=1, k=5, align=\"right\", fill=NA),\n    team_rolling_drb = rollmean(drb, n=1, k=5, align=\"right\", fill=NA),\n   team_rolling_tovp = rollmean(tovp,n = 1, k=5, align =\"right\", fill=NA))  %&gt;%\n  ungroup() \n\nteam_side &lt;- rollingteamstats %&gt;%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_rolling_efg,\n    team_rolling_orb,\n    team_rolling_drb,\n    team_rolling_tovp,\n    possessions\n    ) \n\nopponent_side &lt;- team_side %&gt;%\n  select(-opponent_team_id) %&gt;% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_efg = team_rolling_efg,\n    opponent_rolling_orb = team_rolling_orb,\n    opponent_rolling_drb = team_rolling_drb,\n    opponent_rolling_tovp = team_rolling_tovp,\n    opponent_possessions = possessions\n  ) %&gt;%\n  mutate(opponent_team_id = as.numeric(opponent_team_id)\n)\n\ngames &lt;- team_side %&gt;% inner_join(opponent_side)\n\nteamdefensiveefficiency &lt;- games %&gt;%\n  arrange(game_date) %&gt;%\n  group_by(team_short_display_name, season) %&gt;%\n  mutate(\n    team_rolling_def = rollmean((opponent_score/opponent_possessions)*100, k=15, align= \"right\", fill=NA)\n    ) %&gt;%\n  ungroup() %&gt;%\n  select(game_id, team_short_display_name, team_rolling_def)\n\n\nopponentdefensiveefficiency &lt;- games %&gt;%\n  arrange(game_date) %&gt;%\n  group_by(opponent_short_display_name, season) %&gt;%\n  mutate(\n    opponent_rolling_def = rollmean((team_score/possessions)*100, k=15, align= \"right\", fill=NA)\n    ) %&gt;%\n  ungroup() %&gt;%\n  select(game_id, opponent_short_display_name, opponent_rolling_def)\n\n\ngames &lt;- games %&gt;% inner_join(teamdefensiveefficiency)\ngames &lt;- games %&gt;% inner_join(opponentdefensiveefficiency)\n\ngames &lt;- games %&gt;% mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n))) %&gt;% na.omit()\n\nmodelgames &lt;- games %&gt;% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp,\n    team_rolling_efg, \n    opponent_rolling_efg,\n    team_rolling_orb,\n    opponent_rolling_orb,\n    team_rolling_drb,\n    opponent_rolling_drb,\n    team_rolling_tovp,\n    opponent_rolling_tovp,\n    team_rolling_def,\n    opponent_rolling_def,\n    team_result\n    ) %&gt;% \n  na.omit()\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %&gt;% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %&gt;% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %&gt;% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %&gt;% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %&gt;% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround1games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(southround1games)\n\nsouthround1games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(southround1games) \n\nsouthround1 &lt;- lightgbm_fit %&gt;% predict(new_data = southround1games) %&gt;%\n  bind_cols(southround1games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 &lt;- lightgbm_fit %&gt;% predict(new_data = southround1games, type=\"prob\") %&gt;%\n  bind_cols(southround1) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"West Virginia\"\n) %&gt;% add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Furman\"\n) %&gt;% add_row(\n  team_short_display_name=\"NC State\",\n  opponent_short_display_name=\"UCSB\"\n) %&gt;% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Arizona\"\n)\n\nsouthround2games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(southround2games)\n\nsouthround2games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(southround2games) \n\nsouthround2 &lt;- lightgbm_fit %&gt;% predict(new_data = southround2games) %&gt;%\n  bind_cols(southround2games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 &lt;- lightgbm_fit %&gt;% predict(new_data = southround2games, type=\"prob\") %&gt;%\n  bind_cols(southround2) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"West Virginia\",\n  opponent_short_display_name=\"Charleston\"\n) %&gt;% add_row(\n  team_short_display_name=\"UCSB\",\n  opponent_short_display_name=\"Missouri\"\n)\n\nsouthround3games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(southround3games)\n\nsouthround3games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(southround3games) \n\nsouthround3 &lt;- lightgbm_fit %&gt;% predict(new_data = southround3games) %&gt;%\n  bind_cols(southround3games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 &lt;- lightgbm_fit %&gt;% predict(new_data = southround3games, type=\"prob\") %&gt;%\n  bind_cols(southround3) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"UCSB\",\n  opponent_short_display_name=\"Charleston\"\n)\n\nsouthround4games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(southround4games)\n\nsouthround4games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(southround4games) \n\nsouthround4 &lt;- lightgbm_fit %&gt;% predict(new_data = southround4games) %&gt;%\n  bind_cols(southround4games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 &lt;- lightgbm_fit %&gt;% predict(new_data = southround4games, type=\"prob\") %&gt;%\n  bind_cols(southround4) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair. Dickinson\"\n) %&gt;% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %&gt;% add_row(\n  team_short_display_name= \"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %&gt;% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %&gt;% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround1games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(eastround1games)\n\neastround1games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(eastround1games) \n\neastround1 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround1games) %&gt;%\n  bind_cols(eastround1games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround1games, type=\"prob\") %&gt;%\n  bind_cols(eastround1) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"FAU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Tennessee\"\n) %&gt;% add_row(\n  team_short_display_name=\"Providence\",\n  opponent_short_display_name=\"Montana St\"\n) %&gt;% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround2games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(eastround2games)\n\neastround2games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(eastround2games) \n\neastround2 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround2games) %&gt;%\n  bind_cols(eastround2games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround2games, type=\"prob\") %&gt;%\n  bind_cols(eastround2) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %&gt;% add_row(\n  team_short_display_name=\"Providence\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround3games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(eastround3games)\n\neastround3games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(eastround3games) \n\neastround3 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround3games) %&gt;%\n  bind_cols(eastround3games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround3games, type=\"prob\") %&gt;%\n  bind_cols(eastround3) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround4games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(eastround4games)\n\neastround4games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(eastround4games) \n\neastround4 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround4games) %&gt;%\n  bind_cols(eastround4games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround4games, type=\"prob\") %&gt;%\n  bind_cols(eastround4) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %&gt;% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %&gt;% add_row(\n  team_short_display_name= \"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pittsburgh\"\n) %&gt;% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround1games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(midwestround1games)\n\nmidwestround1games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(midwestround1games) \n\nmidwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround1games) %&gt;%\n  bind_cols(midwestround1games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround1games, type=\"prob\") %&gt;%\n  bind_cols(midwestround1) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"N Kentucky\",\n  opponent_short_display_name=\"Iowa\"\n) %&gt;% add_row(\n  team_short_display_name=\"Drake\",\n  opponent_short_display_name=\"Kent State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Pittsburgh\",\n  opponent_short_display_name=\"Xavier\"\n) %&gt;% add_row(\n  team_short_display_name=\"Penn State\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround2games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(midwestround2games)\n\nmidwestround2games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(midwestround2games) \n\nmidwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround2games) %&gt;%\n  bind_cols(midwestround2games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround2games, type=\"prob\") %&gt;%\n  bind_cols(midwestround2) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"N Kentucky\",\n  opponent_short_display_name=\"Kent State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround3games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(midwestround3games)\n\nmidwestround3games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(midwestround3games) \n\nmidwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround3games) %&gt;%\n  bind_cols(midwestround3games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround3games, type=\"prob\") %&gt;%\n  bind_cols(midwestround3) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"Kent State\",\n  opponent_short_display_name=\"Xavier\"\n)\n\nmidwestround4games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(midwestround4games)\n\nmidwestround4games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(midwestround4games) \n\nmidwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround4games) %&gt;%\n  bind_cols(midwestround4games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround4games, type=\"prob\") %&gt;%\n  bind_cols(midwestround4) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %&gt;% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %&gt;% add_row(\n  team_short_display_name= \"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %&gt;% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Arizona St\"\n) %&gt;% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %&gt;% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %&gt;% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround1games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(westround1games)\n\nwestround1games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(westround1games) \n\nwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = westround1games) %&gt;%\n  bind_cols(westround1games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = westround1games, type=\"prob\") %&gt;%\n  bind_cols(westround1) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"Howard\",\n  opponent_short_display_name=\"Illinois\"\n) %&gt;% add_row(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Iona\"\n) %&gt;% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %&gt;% add_row(\n  team_short_display_name=\"Boise St\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround2games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(westround2games)\n\nwestround2games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(westround2games) \n\nwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = westround2games) %&gt;%\n  bind_cols(westround2games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = westround2games, type=\"prob\") %&gt;%\n  bind_cols(westround2) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"Howard\",\n  opponent_short_display_name=\"VCU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround3games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(westround3games)\n\nwestround3games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(westround3games) \n\nwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = westround3games) %&gt;%\n  bind_cols(westround3games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = westround3games, type=\"prob\") %&gt;%\n  bind_cols(westround3) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Gonzaga\"\n)\n\nwestround4games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(westround4games)\n\nwestround4games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(westround4games) \n\nwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = westround4games) %&gt;%\n  bind_cols(westround4games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = westround4games, type=\"prob\") %&gt;%\n  bind_cols(westround4) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nfinal4games &lt;- tibble(\n  team_short_display_name=\"UCSB\",\n  opponent_short_display_name=\"Vermont\"\n) %&gt;% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Gonzaga\"\n)\n\nfinal4games &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(final4games)\n\nfinal4games &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(final4games) \n\nfinal4 &lt;- lightgbm_fit %&gt;% predict(new_data = final4games) %&gt;%\n  bind_cols(final4games) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinal4 &lt;- lightgbm_fit %&gt;% predict(new_data = final4games, type=\"prob\") %&gt;%\n  bind_cols(final4) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\nfinalgames &lt;- tibble(\n  team_short_display_name=\"Vermont\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\nfinalgames &lt;- modelgames %&gt;% group_by(team_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% select(-team_result, -starts_with(\"opponent\")) %&gt;% right_join(finalgames)\n\nfinalgames &lt;- modelgames %&gt;% group_by(opponent_short_display_name) %&gt;% filter(game_date == max(game_date) & season == 2023) %&gt;% slice(1) %&gt;% ungroup() %&gt;% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% right_join(finalgames) \n\nfinal &lt;- lightgbm_fit %&gt;% predict(new_data = finalgames) %&gt;%\n  bind_cols(finalgames) %&gt;% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinal &lt;- lightgbm_fit %&gt;% predict(new_data = finalgames, type=\"prob\") %&gt;%\n  bind_cols(final) %&gt;% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\ntournamentgames &lt;- load_mbb_team_box(seasons=2023) %&gt;% filter(game_date &gt; as.Date(\"2023-03-16\")) %&gt;%\n  mutate(\n    team_score = ((field_goals_made-three_point_field_goals_made) * 2) + (three_point_field_goals_made*3) + free_throws_made,\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    ppp = team_score * 100 /possessions,\n    efg = (field_goals_made  + 0.5 * three_point_field_goals_made) /field_goals_attempted,\n    orb = (offensive_rebounds / total_rebounds),\n    drb = (defensive_rebounds / total_rebounds),\n    tovp = (turnovers *100 ) / (field_goals_attempted + 0.44 * free_throws_attempted + turnovers),\n    result = (team_winner)\n  )\n\n\nWith points per possession, my thoughts were that the team that outscored the other team with rolling points per possession would win more games and would eventually win the whole thing. The graph below shows this from my team rolling averages and the eventual team results that go along with it.\n\n\nCode\ntournamentgames %&gt;%\n  ggplot() + \n  geom_point(\n    data=games, aes(x=team_rolling_ppp, y=opponent_rolling_ppp, color=team_result)) +\n  labs(title=element_text(size=50, face=\"bold\", \"Team Performance in the Tournament\", color = \"black\"), \n       x=\"Team Rolling Points Per Possession\", y=\"Opponent Rolling Points Per Possession\", color=\"Team Result\") +\n  theme_bw() +\n  theme(axis.title.x = element_text(size = 12, face = \"bold\", color = \"black\"),\n        axis.title.y = element_text(size = 12, face = \"bold\", color = \"black\"))\n\n\n\n\n\nHere, I have taken a deeper look at my west division of my bracket. Looking at things in depth, both of the teams that I predicted to win against their opponents, the model was fairly confident. The model was also accurate.Where things got tricky in my bracket was when the win confidence hovered around the 40 to 50 % margin. Almost all of these games, my model predicted incorrectly. This is truly unfortunate because had the coin been flipped, many of those games would have been predicted correctly.\n\n\nCode\nteam &lt;- c(\"Kansas\", \"Arkansas\", \"Saint Mary's\", \"UConn\", \"TCU\", \"Gonzaga\", \"Northwestern\", \"UCLA\")\nprediction &lt;- c(\"Loss\", \"Loss\", \"Loss\", \"Loss\", \"Win\", \"Win\", \"Loss\", \"Loss\")\nwin_confidence &lt;- c(0.3, 0.4, 0.4, 0.4, 0.6, 0.7, 0.4, 0.4  )\nopponent &lt;- c(\"Howard\", \"Illinois\", \"VCU\", \"Iona\", \"Arizona St\", \"GCU\", \"Boise St\", \"UNCA\")\n\ntabledata &lt;- tibble(team,prediction,win_confidence,opponent)\n\n\n\n\nCode\ntabledata %&gt;%\n  gt() %&gt;%\n  cols_label(\n    team = \"Team\",\n    prediction = \"Win/Loss Prediction\",\n    win_confidence = \"Confidence\",\n    opponent = \"Opponent\"\n  ) %&gt;%\n  tab_header(\n    title = \"Win or Loss Prediction for NCAA Tournament Games\"\n  ) %&gt;% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(groups = \"title\")\n  )\n\n\n\n\n\n\n  \n    \n      Win or Loss Prediction for NCAA Tournament Games\n    \n    \n  \n  \n    \n      Team\n      Win/Loss Prediction\n      Confidence\n      Opponent\n    \n  \n  \n    Kansas\nLoss\n0.3\nHoward\n    Arkansas\nLoss\n0.4\nIllinois\n    Saint Mary's\nLoss\n0.4\nVCU\n    UConn\nLoss\n0.4\nIona\n    TCU\nWin\n0.6\nArizona St\n    Gonzaga\nWin\n0.7\nGCU\n    Northwestern\nLoss\n0.4\nBoise St\n    UCLA\nLoss\n0.4\nUNCA\n  \n  \n  \n\n\n\n\nSo why did this happen?\nGiven the fact that all of the losses were with probabilities around 50%, this could have equally been flipped. This means that further metrics to specify a win or loss prediction would be useful. The metrics that I chose very obviously did not differentiate between the teams enough for it to make a substantial prediction of wins and losses.\nIn the future, If i were to do this again I would add more specific team metrics that include player stats and team schedule strength. With the metrics I used, it never took into account that the teams who play are all very different caliber. Although Iona may have beat some very small schools with big points and good metrics but when faced against teams like UConn it does not match up comparably.\nWith all of that being said, If I were to redo this, I would have made some very large changes. Although March Madness is unpredictable, I feel as though my predictions could have been somewhat more reliable and accurate. As you can see, this March Madness bracket was not very accurate."
  },
  {
    "objectID": "posts/which-2023-draft-class-rookie-should-you-draft/index.html",
    "href": "posts/which-2023-draft-class-rookie-should-you-draft/index.html",
    "title": "Which 2023 draft class rookie WR should you draft to your fantasy team?",
    "section": "",
    "text": "In my Advanced Sports data class this semester, we were tasked with predicting which fantasy rookie wide receivers would be the best to draft for fantasy game play from the 2023 draft class. This was a difficult task as it is notably hard to predict the future.\nThrough some help with feature engineering and regression models, we can better predict the accuracy of something using statistics. For my model, I chose to use the xgboost since it was more accurate with less error. Below shows the process with using prediction models to correlate statistics from players’ careers to their fantasy points which further correlates to the degree of value in which a player should be drafted.\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(cfbfastR)\nlibrary(janitor)\nlibrary(bonsai)\nlibrary(gt)\nlibrary(corrr)\nset.seed(1234)\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrdraftedstatswithratingsfixed.csv\")\n\nwrselected &lt;- wrstats %&gt;%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_touchdowns,\n    total_receptions,\n    total_yards,\n    rating,\n    FantPt\n  ) %&gt;% na.omit()\n\nplayer_split &lt;- initial_split(wrselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\nplayer_recipe &lt;- \n  recipe(FantPt ~ ., data = player_train) %&gt;%\n  update_role(name, year, college_team, nfl_team, new_role = \"ID\")\nxg_mod &lt;- boost_tree(\n  trees = tune(), \n  learn_rate = tune(),\n  tree_depth = tune(), \n  min_n = tune(),\n  loss_reduction = tune(), \n  sample_size = tune(), \n  mtry = tune(), \n  ) %&gt;% \n  set_mode(\"regression\") %&gt;% \n  set_engine(\"xgboost\")\n\nxg_workflow &lt;- \n  workflow() %&gt;% \n  add_model(xg_mod) %&gt;% \n  add_recipe(player_recipe)\n\nxgb_grid &lt;- grid_latin_hypercube(\n  trees(),\n  tree_depth(),\n  min_n(),\n  loss_reduction(),\n  sample_size = sample_prop(),\n  finalize(mtry(), player_train),\n  learn_rate()\n)\n\nplayer_folds &lt;- vfold_cv(player_train)\n\nxgb_res &lt;- tune_grid(\n  xg_workflow,\n  resamples = player_folds,\n  grid = xgb_grid,\n  control = control_grid(save_pred = TRUE)\n)\n\nbest_rmse &lt;- select_best(xgb_res, \"rmse\")\n\nfinal_xgb &lt;- finalize_workflow(\n  xg_workflow,\n  best_rmse\n)\nxg_fit &lt;- \n  final_xgb %&gt;% \n  fit(data = player_train)\n\nxgpredict &lt;- \n  xg_fit %&gt;% \n  predict(new_data = player_train) %&gt;%\n  bind_cols(player_train) \n\nmetrics(xgpredict, FantPt, .pred)\n\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard      39.0  \n2 rsq     standard       0.482\n3 mae     standard      27.8\nTo predict for the current class, I decided to go with some pretty basic statistics. The first thing that I chose was total touchdowns. Although it is difficult to say if touchdowns will correlate to the NFL due to the difference in conferences and team factors that are out of the control of statistics, I still felt that it would be good to include. The next being total receptions. Typically if a wide receiver has more receptions, that is an indicator of success and thus greater accumulation of fantasy points. The next I chose was total yards. Similar to the last two metrics, total yards shows a great impact on the football field. Lastly was the offensive rating. This is predictive in the sense that it takes into account multiple statistics to compare different players.\nCode\ncurrentwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/currentwrstats.csv\")\n\ncurrentwrselected &lt;- currentwrstats %&gt;%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_touchdowns, \n    total_receptions,\n    total_yards,\n    rating\n    ) %&gt;% na.omit()\n\ncurrentxgpredict &lt;-\n  xg_fit %&gt;%\n  predict(new_data = currentwrselected) %&gt;%\n   bind_cols(currentwrselected) \n\ncurrentxgpredict %&gt;%\n  top_n(5, wt= .pred) %&gt;%\n  select(name, nfl_team,overall, .pred) %&gt;%\n  gt() %&gt;%\n  cols_label( \n    name = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Fantasy Points\"\n  )\n\n\n\n\n\n\n\n\n\nPlayer\nTeam\nPick\nFantasy Points\n\n\n\n\nJaxon Smith-Njigba\nSeattle\n20\n78.55450\n\n\nQuentin Johnston\nLos Angeles\n21\n81.61362\n\n\nZay Flowers\nBaltimore\n22\n69.34767\n\n\nJordan Addison\nMinnesota\n23\n82.74207\n\n\nJonathan Mingo\nCarolina\n39\n62.93239\nThis table shows the top 5 receivers for the 2023 draft class. It is interesting to see that the draft order truly has nothing to do with the fantasy points that my model predicts will occur. Although it can be argued that fantasy points have little to no value to an actual gameplay in a real football game, typically good players prove to bring greater success to a team on the field. I’m thinking about some GOATs as in Patrick Mahomes and Travis Kelce. Both players with high fantasy points who bring a difference on the field at the end of the day."
  },
  {
    "objectID": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#jordan-addison---pick-23---usc---minnesota-vikings",
    "href": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#jordan-addison---pick-23---usc---minnesota-vikings",
    "title": "Which 2023 draft class rookie WR should you draft to your fantasy team?",
    "section": "1) Jordan Addison - Pick 23 - USC - Minnesota Vikings",
    "text": "1) Jordan Addison - Pick 23 - USC - Minnesota Vikings\nApparently the Minnesota Vikings lucked out. Although many Vikings fans were pawning for the few picks that came before, according to my metrics Jordan Addison is going to be a high performer. With the prediction of 82.74 fantasy points, he is a valuable player for anyone who picks him in their fantasy league. While I believe that this is probably pretty accurate, he would not be my personal first choice for a draft pick in terms of wide receivers. I am curious to see his performance after his time ar USC with an entirely different league."
  },
  {
    "objectID": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#quentin-johnston---pick-21---tcu---los-angeles-chargers",
    "href": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#quentin-johnston---pick-21---tcu---los-angeles-chargers",
    "title": "Which 2023 draft class rookie WR should you draft to your fantasy team?",
    "section": "2) Quentin Johnston - Pick 21 - TCU - Los Angeles Chargers",
    "text": "2) Quentin Johnston - Pick 21 - TCU - Los Angeles Chargers\nJohnston comes up JUST short of coming in first with 81.61 predicted points. Similar to Addison, there is no doubt that he would be a good choice in terms of rookies to draft from the 2023 class. The thing that I would want to consider is the success of the Big 12 in the NFL and TCU in the national championship game especially against the SEC powerhouse Georgia (Go Dawgs) whom is notably successful in the NFL. There is no doubt of Johnston’s talent, but a player I would want to watch before drafting."
  },
  {
    "objectID": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#jaxon-smith-njigba---pick-20---ohio-state---seattle-seahawks",
    "href": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#jaxon-smith-njigba---pick-20---ohio-state---seattle-seahawks",
    "title": "Which 2023 draft class rookie WR should you draft to your fantasy team?",
    "section": "3) Jaxon Smith-Njigba - Pick 20 - Ohio State - Seattle Seahawks",
    "text": "3) Jaxon Smith-Njigba - Pick 20 - Ohio State - Seattle Seahawks\nThis one is interesting to me. Although he went first for wide receivers and one cannot escape the media talking about him, he was predicted third using the metrics that I chose. With 78.55 predicted fantasy points, he is still predicted to be a VERY high performer. Personally, given the fact that he has experience in Pro style Big Ten football, I would use this as added bonus to his value. Coming up just behind one and two in fantasy points, I would still find Jaxon to be a very valuable draft pick."
  },
  {
    "objectID": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#zay-flowers---pick-22---boston-college---baltimore-ravens",
    "href": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#zay-flowers---pick-22---boston-college---baltimore-ravens",
    "title": "Which 2023 draft class rookie WR should you draft to your fantasy team?",
    "section": "4) Zay Flowers - Pick 22 - Boston College - Baltimore Ravens",
    "text": "4) Zay Flowers - Pick 22 - Boston College - Baltimore Ravens\nNext up is Zay Flowers. With 69.34 fantasy points, Flowers is a big talent from a school that did not do him the justice he may have deserved with his predictive statistics. Given that he went 22 in the actual NFL draft, I very much like this pick as an “underdog” per-say. I may even place him second within my personal choices for fantasy draft picks. He is notable fast and with a player like Lamar Jackson on his team, there could be a lot of success for this player in the future of fantasy."
  },
  {
    "objectID": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#jonathan-mingo-----pick-39---ole-miss---carolina-panthers",
    "href": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#jonathan-mingo-----pick-39---ole-miss---carolina-panthers",
    "title": "Which 2023 draft class rookie WR should you draft to your fantasy team?",
    "section": "5) Jonathan Mingo - - Pick 39 - Ole Miss - Carolina Panthers",
    "text": "5) Jonathan Mingo - - Pick 39 - Ole Miss - Carolina Panthers\nLast but not least we have Jonathan Mingo. With 62.93 fantasy points, he is notably behind the predictive statistics of the others we are comparing him to. Going 39th overall is still not bad for a receiever, but if I was able to draft a different WR rookie before him, I may be very interested in doing such. With the Panthers having an exciting season upon them given their first overall pick, there is still some posivity to be thrown in the way of Mingo. Although not a bad choice, I will be interested to see how this rookie performs in his first NFL season."
  },
  {
    "objectID": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#closing-thoughts",
    "href": "posts/which-2023-draft-class-rookie-should-you-draft/index.html#closing-thoughts",
    "title": "Which 2023 draft class rookie WR should you draft to your fantasy team?",
    "section": "Closing Thoughts",
    "text": "Closing Thoughts\nOverall, I found this project to be very exciting. Personally, I think that any of these rookies would be decent choices as fantasy rookies. When drafting a rookie I think it is difficult to predict their success if you have not seen them play with a team. There are a lot of other factors that go into a player’s success such as their quarterback, their team’s success, the team’s style of play and then the actual opponents themselves. I personally would go with the #3 choice, Jaxon Smith-Njigba if I had a free choice of rookies to draft in my fantasy league. Given that I have seen him play the most, I have an affinity with him and a high confidence. I hope that all of these guys perform well in their rookie seasons and it will be interesting to see how this all plays out. Stay tuned for next year when I compare how these rooks actually performed in fantasy to their predictive statistics."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "Which 2023 draft class rookie WR should you draft to your fantasy team?\n\n\n\n\n\n\n\nfantasy\n\n\nfootball\n\n\nrankings\n\n\n\n\n\n\n\n\n\n\n\nMay 11, 2023\n\n\nRegan Vaccaro\n\n\n\n\n\n\n  \n\n\n\n\nMarch Madness has its name for a reason.\n\n\n\n\n\n\n\nmarchmadness\n\n\nncaaprediction\n\n\nbasketball\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2023\n\n\nRegan Vaccaro\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]